name: Python Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install TA-Lib C library
      run: |
        # Install build dependencies
        sudo apt-get update
        sudo apt-get install -y build-essential autoconf libtool pkg-config

        # Download and install TA-Lib from source
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install
        cd ..
        
        # Update linker cache
        sudo ldconfig
        
        # Create symlink for the Python wrapper to find the library
        sudo find /usr -name "libta_lib.so*" -type f
        sudo ln -sf /usr/lib/libta_lib.so /usr/lib/libta-lib.so
        sudo ln -sf /usr/lib/libta_lib.so.0 /usr/lib/libta-lib.so.0
        
        # Verify installation
        find /usr/lib -name "libta*"
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel setuptools pytest pytest-cov flake8 black mypy
        
        # Install NumPy first (required for TA-Lib)
        python -m pip install numpy
        
        # Set library paths and install TA-Lib
        export TA_LIBRARY_PATH=/usr/lib
        export TA_INCLUDE_PATH=/usr/include
        export LD_LIBRARY_PATH=/usr/lib:$LD_LIBRARY_PATH
        
        # Install TA-Lib Python wrapper
        python -m pip install --no-build-isolation TA-Lib
        
        # Verify TA-Lib installation
        python -c "import talib; print('TA-Lib version:', talib.__version__); print('Available functions:', talib.get_functions()[:5])"
        
        # Install other dependencies
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # Install package in development mode
        pip install -e .
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    - name: Check formatting with black
      run: |
        black --check --diff .
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports .
    - name: Test with pytest
      run: |
        # Run tests with coverage
        pytest --cov=auto_vertical_spread_trader --cov-report=xml --cov-report=term --cov-fail-under=80
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false 