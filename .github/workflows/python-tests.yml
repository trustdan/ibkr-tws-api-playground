name: Python Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Main test job using Debian container
  test:
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm-slim
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      run: |
        # Install Python and dependencies with minimal footprint
        apt-get update
        apt-get install -y --no-install-recommends python3 python3-pip python3-venv python3-dev build-essential wget ca-certificates sudo
        
        # Clean up apt cache to reduce container size
        apt-get clean
        rm -rf /var/lib/apt/lists/*
        
        # Create symlinks from Python to python3 for compatibility
        ln -sf /usr/bin/python3 /usr/bin/python
        ln -sf /usr/bin/pip3 /usr/bin/pip
        
        # Check Python version to ensure we're using the right one
        python --version
    
    # Cache pip packages
    - name: Get pip cache directory
      id: pip-cache
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      
    - name: Set up pip cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install TA-Lib using bootstrap script
      run: |
        chmod +x scripts/bootstrap_talib.sh
        # Use sudo for system-wide installations in the script
        sudo -E bash scripts/bootstrap_talib.sh
      
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel setuptools pytest pytest-cov flake8 black mypy
        
        # Install other dependencies
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # Install package in development mode
        pip install -e .
    
    - name: Verify TA-Lib installation
      run: |
        python scripts/verify_talib.py
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Check formatting with black
      run: |
        black --check --diff .
    
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports .
    
    - name: Test with pytest
      run: |
        # Run tests with coverage
        pytest --cov=auto_vertical_spread_trader --cov-report=xml --cov-report=term --cov-fail-under=80

  # macOS build with Homebrew
  macos-build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    # Cache Homebrew packages
    - name: Cache Homebrew packages
      uses: actions/cache@v3
      with:
        path: ~/Library/Caches/Homebrew
        key: ${{ runner.os }}-brew-${{ hashFiles('.github/workflows/python-tests.yml') }}
        restore-keys: |
          ${{ runner.os }}-brew-
    
    # Cache pip packages
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    # Check for macOS ARM architecture (GitHub hosted runners could eventually be Apple Silicon)
    - name: Check CPU architecture
      id: cpu-arch
      run: |
        ARCH=$(uname -m)
        echo "Architecture detected: $ARCH"
        echo "arch=$ARCH" >> $GITHUB_OUTPUT
        # Set CONDA_SUBDIR if needed for ARM architecture
        if [[ "$ARCH" == "arm64" ]]; then
          echo "Setting CONDA_SUBDIR for Apple Silicon"
          echo "CONDA_SUBDIR=osx-64" >> $GITHUB_ENV
        fi
    
    - name: Install TA-Lib using bootstrap script
      run: |
        chmod +x scripts/bootstrap_talib.sh
        bash scripts/bootstrap_talib.sh
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Install test dependencies and package
        pip install pytest
        pip install -e .
    
    - name: Verify TA-Lib installation
      run: |
        python scripts/verify_talib.py
    
    - name: Run comprehensive indicator tests
      run: |
        bash scripts/verify_talib.sh

  # Windows build using our PowerShell bootstrap script
  windows-build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    # Cache pip packages
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install TA-Lib using bootstrap script
      shell: pwsh
      run: |
        # Set execution policy to allow script execution
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process
        # Run the bootstrap script
        .\scripts\bootstrap_talib.ps1
    
    - name: Install Python dependencies
      shell: pwsh
      run: |
        pip install pytest
        if (Test-Path -Path "requirements.txt") {
          pip install -r requirements.txt
        }
        pip install -e .
    
    - name: Verify TA-Lib installation
      shell: pwsh
      run: |
        python scripts/verify_talib.py
    
    - name: Run comprehensive indicator tests (if verify_talib.sh exists)
      shell: pwsh
      run: |
        $env:PYTHONIOENCODING = "utf-8"
        if (Test-Path -Path "scripts/verify_talib.sh") {
          # Only try to run this if bash is available
          if (Get-Command bash -ErrorAction SilentlyContinue) {
            bash scripts/verify_talib.sh
          } else {
            Write-Host "Bash not available, using Python verification script instead"
            python scripts/verify_talib.py
          }
        } else {
          python scripts/verify_talib.py
        } 