name: Python Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Main test job using Debian container
  test:
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm-slim
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python and TA-Lib dependencies
      run: |
        # Install Python and dependencies with minimal footprint
        apt-get update
        apt-get install -y --no-install-recommends python3 python3-pip python3-venv python3-dev ta-lib-dev build-essential wget ca-certificates
        
        # Clean up apt cache to reduce container size
        apt-get clean
        rm -rf /var/lib/apt/lists/*
        
        # Create symlinks from Python to python3 for compatibility
        ln -sf /usr/bin/python3 /usr/bin/python
        ln -sf /usr/bin/pip3 /usr/bin/pip
        
        # Check Python version to ensure we're using the right one
        python --version
        
        # Verify TA-Lib library is installed correctly
        ls -la /usr/lib/libta*
        
        # Verify the library has the needed symbols
        if [ -f "/usr/lib/libta_lib.so" ]; then
          echo "Found libta_lib.so - creating symlinks for Python wrapper"
          ln -sf /usr/lib/libta_lib.so /usr/lib/libta-lib.so
          ln -sf /usr/lib/libta_lib.so.0 /usr/lib/libta-lib.so.0
          ldconfig
        fi
    
    # Cache pip packages
    - name: Get pip cache directory
      id: pip-cache
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      
    - name: Set up pip cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel setuptools pytest pytest-cov flake8 black mypy
        python -m pip install numpy
        python -m pip install TA-Lib
        
        # Install other dependencies
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # Install package in development mode
        pip install -e .
    
    - name: Verify TA-Lib installation
      run: |
        python - << 'EOF'
        import talib
        import numpy as np
        
        # Test basic SMA calculation
        data = np.random.random(100)
        output = talib.SMA(data)
        print("TA-Lib SMA output:", output[:5])
        
        # Ensure AVGDEV function is available
        if hasattr(talib, 'AVGDEV'):
            avgdev = talib.AVGDEV(data)
            print("TA-Lib AVGDEV output:", avgdev[:5])
        else:
            print("WARNING: AVGDEV function not available")
        
        # List all available functions
        print("Available functions:", len(talib.get_functions()))
        print("Sample functions:", talib.get_functions()[:5])
        
        # Quick smoke test that was requested
        sma_result = talib.SMA(np.arange(10))
        print("Quick smoke test - SMA:", sma_result[0:3])
        EOF
    
    - name: Run comprehensive indicator tests
      run: |
        bash scripts/verify_talib.sh
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Check formatting with black
      run: |
        black --check --diff .
    
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports .
    
    - name: Test with pytest
      run: |
        # Run tests with coverage
        pytest --cov=auto_vertical_spread_trader --cov-report=xml --cov-report=term --cov-fail-under=80

  # macOS build with Homebrew
  macos-build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    # Cache Homebrew packages
    - name: Cache Homebrew packages
      uses: actions/cache@v3
      with:
        path: ~/Library/Caches/Homebrew
        key: ${{ runner.os }}-brew-${{ hashFiles('.github/workflows/python-tests.yml') }}
        restore-keys: |
          ${{ runner.os }}-brew-
    
    # Cache pip packages
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install TA-Lib via Homebrew with proper prefix handling
      run: |
        # Install TA-Lib with Homebrew
        brew install ta-lib
        
        # Determine the installation path
        PREFIX=$(brew --prefix ta-lib)
        echo "TA-Lib installed at: $PREFIX"
        
        # Set environment variables for compilation
        echo "LDFLAGS=-L$PREFIX/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$PREFIX/include" >> $GITHUB_ENV
        echo "TA_LIBRARY_PATH=$PREFIX/lib" >> $GITHUB_ENV
        echo "TA_INCLUDE_PATH=$PREFIX/include" >> $GITHUB_ENV
        
        # Verify library exists
        ls -la $PREFIX/lib/libta_lib*
    
    - name: Install Python dependencies and TA-Lib
      run: |
        python -m pip install --upgrade pip numpy
        
        # Use explicit compiler flags for TA-Lib installation
        LDFLAGS="-L${{ env.TA_LIBRARY_PATH }}" CPPFLAGS="-I${{ env.TA_INCLUDE_PATH }}" pip install --no-build-isolation TA-Lib
        
        # Install test dependencies and package
        pip install pytest
        pip install -e .
    
    - name: Verify TA-Lib installation
      run: |
        python - << 'EOF'
        import talib
        import numpy as np
        
        # Test basic SMA calculation
        data = np.random.random(100)
        output = talib.SMA(data)
        print("TA-Lib SMA output:", output[:5])
        
        # List all available functions
        print("Available functions:", len(talib.get_functions()))
        print("Sample functions:", talib.get_functions()[:5])
        
        # Quick smoke test
        sma_result = talib.SMA(np.arange(10))
        print("Quick smoke test - SMA:", sma_result[0:3])
        EOF
    
    - name: Run comprehensive indicator tests
      run: |
        bash scripts/verify_talib.sh

  # Windows build with both wheel and conda approaches
  windows-build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    # Cache pip packages
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install TA-Lib using GitHub released wheel
      shell: powershell
      run: |
        $pyver = python -c "import sys; print(f'{sys.version_info.major}{sys.version_info.minor}')"
        $arch = "win_amd64" # Assume 64-bit
        
        # Install required dependencies
        pip install numpy
        
        # Try GitHub released wheel first
        try {
          $wheel_url = "https://github.com/TA-Lib/ta-lib-python/releases/download/TA_Lib-0.4.28/TA_Lib-0.4.28-cp${pyver}-cp${pyver}-${arch}.whl"
          Write-Host "Attempting to install from $wheel_url"
          pip install $wheel_url
          Write-Host "Successfully installed TA-Lib from GitHub release"
          exit 0
        } catch {
          Write-Host "Failed to install from GitHub release: $_"
          Write-Host "Will try conda installation next"
        }
      continue-on-error: true
    
    - name: Set up Conda (fallback)
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: '3.10'
        channels: conda-forge
      if: ${{ failure() }}
    
    - name: Install TA-Lib via Conda
      shell: bash -l {0}
      run: |
        conda install -y -c conda-forge ta-lib numpy
        python -c "import sys; print(f'Using Python {sys.version} from {sys.executable}')"
      if: ${{ failure() }}
    
    - name: Verify TA-Lib installation
      shell: powershell
      run: |
        python -c "import numpy; print('NumPy installed')"
        python - << 'EOF'
        import talib
        import numpy as np
        
        # Test basic SMA calculation
        data = np.random.random(100)
        output = talib.SMA(data)
        print("TA-Lib SMA output:", output[:5])
        
        # List all available functions
        print("Available functions:", len(talib.get_functions()))
        print("Sample functions:", talib.get_functions()[:5])
        
        # Quick smoke test
        sma_result = talib.SMA(np.arange(10))
        print("Quick smoke test - SMA:", sma_result[0:3])
        EOF
    
    - name: Run comprehensive indicator tests
      shell: powershell
      run: |
        ./scripts/verify_talib.sh 