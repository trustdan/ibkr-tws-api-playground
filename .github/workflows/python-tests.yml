name: Python Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install TA-Lib system library
      run: |
        # Enable Universe repository and use official Ubuntu mirror
        sudo add-apt-repository universe
        # Replace Azure mirror entries with main Ubuntu archive
        sudo sed -i 's|http://azure.archive.ubuntu.com/ubuntu|http://archive.ubuntu.com/ubuntu|g' /etc/apt/sources.list
        sudo apt-get update
        
        # Verify Universe is active and libta-lib-dev is available
        echo "Checking if libta-lib-dev is available in repositories:"
        apt-cache policy libta-lib-dev
        
        # Install the package
        sudo apt-get install -y libta-lib-dev
        
        # Check which file was actually installed (underscore or dash)
        echo "Checking installed library files:"
        ls -la /usr/lib/libta*lib*
        
        # Create symlinks if needed (package might install as libta_lib.so)
        if [ -f "/usr/lib/libta_lib.so" ] && [ ! -f "/usr/lib/libta-lib.so" ]; then
          echo "Creating symlinks from libta_lib.so to libta-lib.so"
          sudo ln -sf /usr/lib/libta_lib.so /usr/lib/libta-lib.so
          sudo ln -sf /usr/lib/libta_lib.so.0 /usr/lib/libta-lib.so.0
          sudo ldconfig
        fi
        
        # Verify C library exported symbols (using the name expected by Python wrapper)
        echo "Verifying exported symbols in libta-lib.so:"
        if [ -f "/usr/lib/libta-lib.so" ]; then
          nm -D /usr/lib/libta-lib.so | grep TA_AVGDEV_Lookback
          echo "✓ TA_AVGDEV_Lookback symbol is present in libta-lib.so"
        elif [ -f "/usr/lib/libta_lib.so" ]; then
          nm -D /usr/lib/libta_lib.so | grep TA_AVGDEV_Lookback
          echo "✓ TA_AVGDEV_Lookback symbol is present in libta_lib.so"
        else
          echo "ERROR: Neither libta-lib.so nor libta_lib.so found!"
          exit 1
        fi
        
        # Verify the library is properly installed and registered
        echo "Checking TA-Lib library in system cache:"
        ldconfig -p | grep libta
        ls -la /usr/lib/libta*lib*
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel setuptools pytest pytest-cov flake8 black mypy
        python -m pip install numpy
        python -m pip install TA-Lib
        
        # Install other dependencies
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # Install package in development mode
        pip install -e .
    
    - name: Verify TA-Lib installation
      run: |
        python - << 'EOF'
        import ctypes, talib
        # Ensure the C library loads
        ctypes.CDLL('libta-lib.so')
        # Ensure the wrapper finds its symbols
        funcs = talib.get_functions()
        print('TA-Lib functions sample:', funcs[:5])
        
        # Test a simple function call
        import numpy as np
        close = np.random.random(100)
        output = talib.SMA(close)
        print(f"SMA calculation successful: {output.shape}")
        EOF
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Check formatting with black
      run: |
        black --check --diff .
    
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports .
    
    - name: Test with pytest
      run: |
        # Run tests with coverage
        pytest --cov=auto_vertical_spread_trader --cov-report=xml --cov-report=term --cov-fail-under=80
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # Test source build fallback on newer Ubuntu
  source-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Build TA-Lib from source
      run: |
        # Install build dependencies
        sudo apt-get update
        sudo apt-get install -y build-essential wget autoconf libtool pkg-config
        
        # Download and install TA-Lib from source
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install
        cd ..
        
        # Run ldconfig to update shared library cache
        sudo ldconfig
        
        # Create symlinks with the correct naming expected by the Python wrapper
        sudo ln -sf /usr/lib/libta_lib.so /usr/lib/libta-lib.so
        sudo ln -sf /usr/lib/libta_lib.so.0 /usr/lib/libta-lib.so.0
        sudo ldconfig
        
        # Verify the symlinks are correctly created
        ls -la /usr/lib/libta_lib.so*
        ls -la /usr/lib/libta-lib.so*
        
        # Verify C library exported symbols (using the symlink name)
        echo "Verifying exported symbols in libta-lib.so:"
        nm -D /usr/lib/libta-lib.so | grep TA_AVGDEV_Lookback
        echo "✓ TA_AVGDEV_Lookback symbol is present"
    
    - name: Install Python dependencies and TA-Lib
      run: |
        python -m pip install --upgrade pip
        python -m pip install numpy
        
        # Install TA-Lib with explicit compiler flags
        LDFLAGS="-L/usr/lib" CFLAGS="-I/usr/include" pip install --no-build-isolation TA-Lib
    
    - name: Verify TA-Lib installation
      run: |
        python - << 'EOF'
        import ctypes, talib
        # Ensure the C library loads
        ctypes.CDLL('libta-lib.so')
        # Ensure the wrapper finds its symbols
        funcs = talib.get_functions()
        print('TA-Lib functions sample:', funcs[:5])
        
        # Test a simple function call
        import numpy as np
        close = np.random.random(100)
        output = talib.SMA(close)
        print(f"SMA calculation successful: {output.shape}")
        EOF
    
    - name: Run verification script
      run: |
        chmod +x scripts/verify_talib.sh
        ./scripts/verify_talib.sh

  # Test on macOS using Homebrew
  macos-build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install TA-Lib via Homebrew
      run: |
        brew install ta-lib
        
        # Verify the library is installed
        ls -la /usr/local/lib/libta*
    
    - name: Install Python dependencies and TA-Lib
      run: |
        python -m pip install --upgrade pip
        python -m pip install numpy
        python -m pip install TA-Lib
    
    - name: Verify TA-Lib installation
      run: |
        python - << 'EOF'
        import talib
        print('TA-Lib functions sample:', talib.get_functions()[:5])
        
        # Test a simple function call
        import numpy as np
        close = np.random.random(100)
        output = talib.SMA(close)
        print(f"SMA calculation successful: {output.shape}")
        EOF
    
    - name: Run verification script
      run: |
        chmod +x scripts/verify_talib.sh
        ./scripts/verify_talib.sh

  # Test on Windows using pre-built wheel
  windows-build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install TA-Lib using pre-built wheel
      run: |
        # Determine Python version and platform for wheel URL
        $pythonVersion = (python --version).Split()[1]
        $majorMinor = $pythonVersion.Substring(0, 3).Replace(".", "")
        
        # Download and install appropriate wheel for Python 3.10 64-bit
        Invoke-WebRequest -Uri "https://download.lfd.uci.edu/pythonlibs/archived/ta_lib-0.4.28-cp310-cp310-win_amd64.whl" -OutFile "talib.whl"
        pip install numpy
        pip install talib.whl
    
    - name: Verify TA-Lib installation
      run: |
        python -c "import talib; print('TA-Lib functions sample:', talib.get_functions()[:5]); import numpy as np; close = np.random.random(100); output = talib.SMA(close); print(f'SMA calculation successful: {output.shape}')" 