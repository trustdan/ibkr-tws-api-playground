name: Python Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install TA-Lib
      run: |
        # Install build dependencies
        sudo apt-get update
        sudo apt-get install -y build-essential wget

        # Download and install TA-Lib
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure
        make
        sudo make install
        cd ..
        
        # Update ldconfig to make the library available
        sudo ldconfig
        
        # Debug information
        echo "Checking installed library files:"
        sudo find /usr -name "*ta_lib*" -o -name "*ta-lib*"
        
        # Create symlinks with various naming conventions
        sudo ln -sf /usr/local/lib/libta_lib.so.0 /usr/local/lib/libta-lib.so
        sudo ln -sf /usr/local/lib/libta_lib.so.0 /usr/lib/libta-lib.so
        sudo ln -sf /usr/local/lib/libta_lib.so.0 /usr/lib/libta_lib.so
        
        # Show LD_LIBRARY_PATH and libraries
        echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
        ldconfig -p | grep ta
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest pytest-cov black mypy numpy
        
        # Install TA-Lib Python wrapper with specific flags
        # Using specific TA-Lib version that works better with newer Python versions
        export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
        
        # Skip TA-Lib for now and use alternative packages if needed
        pip install --no-deps numpy pandas
        pip install -e ".[dev]" --no-build-isolation
        
        # Install other dependencies but exclude TA-Lib from requirements.txt
        if [ -f requirements.txt ]; then
          grep -v "TA-Lib" requirements.txt > requirements_filtered.txt
          pip install -r requirements_filtered.txt
        fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    - name: Check formatting with black
      run: |
        black --check --diff .
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports .
    - name: Test with pytest
      run: |
        pytest --cov=auto_vertical_spread_trader --cov-report=xml --cov-report=term --cov-fail-under=80
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false 